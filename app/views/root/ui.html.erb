    <script type="text/javascript">
    var slackUsers = <%= JSON.pretty_generate(slack_users.map { |u| [u.profile['email'], u.to_h] }.to_h).html_safe %>;
    </script>
    <style type="text/css">

circle.node {
  cursor: pointer;
  stroke: #000;
  stroke-width: .5px;
}

line.link {
  fill: none;
  stroke: #9ecae1;
  stroke-width: 1.5px;
}

.svg-container {
  text-align: center;
}

    </style>
      <h2>
        Organization View
      </h2>
      <hr/>
      <div class="svg-container">
      </div>
      <form method="get" class="form-horizontal well">
        <fieldset>
          <legend>Filter by date range</legend>
          <div class="control-group">
            <label class="control-label" for="input01">Start Date</label>
            <div class="controls">
              <input type="date" class="input-xlarge" name="startDate">
            </div>
          </div>
          <div class="control-group">
            <label class="control-label" for="input01">End Date</label>
            <div class="controls">
              <input type="date" class="input-xlarge" name="endDate">
            </div>
          </div>
          <br />
          <div class="form-actions">
            <button type="submit" class="btn btn-primary">Save changes</button>
          </div>
        </fieldset>
      </form>
    <script type="text/javascript">

var w = 800,
    h = 600,
    channelRadius = 200,
    centerX = w / 2,
    centerY = h / 2,
    node,
    link,
    root,
    channelNodes,
    peopleNodes,
    nodeLookup = {},
    links = [],
    rootNode,
    nodes;

var force = d3.layout.force()
    .on("tick", tick)
    .charge(function(d) { return d._children ? -d.size / 100 : -30; })
    .linkDistance(function(d) { return d.target._children ? 80 : 30; })
    .size([w, h - 160]);

var vis = d3.select(".svg-container").append("svg:svg")
    .attr("width", w)
    .attr("height", h);

<% if @startDate && @endDate %>
d3.json("/weights.json?startDate=<%= @startDate %>&endDate=<%= @endDate %>", function(json) {
  <% else %>
d3.json("/weights.json", function(json) {
  <% end %>
  root = json;
  root.fixed = true;
  root.x = w / 2;
  root.y = h / 2 - 80;
  update();
});

var addNode = function (node) {
    nodeLookup[node.name] = node;

    return node;
};

var setupRootNode = function () {
    rootNode = addNode({
        type: "anchor",
        name: "root",
        fixed: true,
        x: centerX,
        y: centerY - 80
    });
};

var setupChannelNodes = function () {
    var nodeCount = root.channels.length;

    var radiansPerNode = (2 * Math.PI) / nodeCount;
    var radians = radiansPerNode / 1.5;

    channelNodes = _.map(root.channels, function (name) {
        radians = radians + radiansPerNode;

        return addNode({
            type: "channel",
            name: name,
            fixed: true,
            x: centerX + (Math.sin(radians) * channelRadius),
            y: centerY + (Math.cos(radians) * channelRadius)
        });
    });
};

var setupPeopleNodes = function () {
    peopleNodes = _.map(root.people, function (obj) {
        return addNode({
            type: "person",
            name: obj.name,
            data: obj
        });
    });
};

var setupLinks = function() {
    _.forEach(peopleNodes, function (node) {
        _.forEach(node.data.channels, function (weight, channel) {
            if (weight == 0) {
                return;
            }

            channelNode = nodeLookup[channel];

            links.push({
                type: "personToChannel",
                source: node,
                target: channelNode,
                weight: weight
            });
        });
    });
};

var setupAllTheThings = function () {
    setupChannelNodes();
    setupPeopleNodes();
    setupLinks();

    nodes = _.values(nodeLookup);

    console.log(nodes);
    console.log(_.map(links, function (link) {
        return link.source.name + " -> " + link.target.name;
    }));
};

var chargeFn = function (node) {
    console.log("charge");
    console.log(node);

    var result = -10;

    switch (node.type)
    {
        case "channel":
          result = -200;
          break;
        case "person":
          result = -400;
          break;
        case "root":
          result = 0;
          break;
    }

    console.log(result);

    return result;
};

function update() {
  setupAllTheThings();

  // Restart the force layout.
  force
      .nodes(nodes)
      .links(links)
      .gravity(0.03)
      .linkDistance(function (link) {
          return 80 * (1 - (link.weight || 0));
      })
      .linkStrength(function (link) {
          return link.weight || 0;
      })
      .charge(chargeFn)
      .start();

  // Update the linksâ€¦
  link = vis.selectAll("line.link").data(links);

  // Enter any new links.
  link.enter()
      .insert("svg:line", ".node")
      .attr("class", "link")
      .attr("style", function (link) {
          return "stroke-width:" + Math.sqrt(20 * link.weight) + "px;" +
            "opacity:" + (0.4 + link.weight);
      })
      .attr("x1", function(d) { return d.source.x; })
      .attr("y1", function(d) { return d.source.y; })
      .attr("x2", function(d) { return d.target.x; })
      .attr("y2", function(d) { return d.target.y; });

  // Exit any old links.
  link.exit().remove();

  node = vis.selectAll("g").data(nodes);

  var container = node.enter()
      .append("g")
      .attr("transform", function(d){return "translate("+d.x+","+d.y+")"})

  var avatarDimensions = 40;

  container.append("svg:circle")
      .attr("class", "node")
      .attr("cx", function(d) { return 0; })
      .attr("cy", function(d) { return 0; })
      .attr("r", function(d) { return 10; })
      .on("mouseover", showName)
      .style("fill", color);

  container.append("image")
    .attr("height", avatarDimensions + "px")
    .attr("width", avatarDimensions + "px")
    .attr("x", "-" + (avatarDimensions / 2) + "px")
    .attr("y", "-" + (avatarDimensions / 2) + "px")
    .attr("xlink:href", function (node) {
        var slackUser = slackUsers[node.name];

        if (!slackUser) {
            return "/slack.png";
        }

        return slackUser.profile.image_192;
    });

  container.append("text")
    .attr("x", (avatarDimensions - 5) + "px")
    .attr("y", "8px")
    .attr("y", "40px")
    .attr("text-anchor", "middle")
    .attr("width", "200px")
    .attr("fill", "#5A544D")
    .text(function (node) { return node.name; });

  container
      .call(force.drag);

  // Exit any old nodes.
  node.exit().remove();
}

function tick() {
  link.attr("x1", function(d) { return d.source.x; })
      .attr("y1", function(d) { return d.source.y; })
      .attr("x2", function(d) { return d.target.x; })
      .attr("y2", function(d) { return d.target.y; });

  node.attr("transform", function(d) { return "translate("+d.x+","+d.y+")"});
}

// Color leaf nodes orange, and packages white or blue.
function color(d) {
  var c = 'Red';

  switch (d.type)
  {
    case "anchor":
      c = "Silver";
      break;
    case "channel":
      c = "Green";
      break;
    case "person":
      c = "Blue";
      break;
  }

  return c;
}

// Toggle children on click.
function click(d) {
  showName(d);
}

function showName(node) {
    var current = document.getElementById("current");
    current.innerHTML = node.name;
}
</script>
